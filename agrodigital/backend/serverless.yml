# serverless.yml
service: agrodigital-backend

custom:
  userPoolId: "us-east-1_ThBKmn221"  # Cambiar con tu User Pool ID
  userPoolClientId: "58ki6vk7sf7k8cg275ra27uj7m" # Cambiar con tu App Client ID
  userTable: "AgroDigital-Users"
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  accountId: "195232097077"  # Tu ID de cuenta de AWS
  
provider:
  name: aws
  runtime: nodejs18.x
  region: ${self:custom.region}
  stage: ${self:custom.stage}
  environment:
    USER_POOL_ID: ${self:custom.userPoolId}
    USER_POOL_CLIENT_ID: ${self:custom.userPoolClientId}
    USER_TABLE: ${self:custom.userTable}
    STAGE: ${self:custom.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.userTable}"
    - Effect: Allow
      Action:
        - cognito-idp:*
      Resource: "arn:aws:cognito-idp:${self:provider.region}:*:userpool/${self:custom.userPoolId}"

package:
  patterns:
    - '!.env*'
    - '!node_modules/.cache/**'

functions:
  register:
    handler: functions/auth/register.handler
    events:
      - http:
          path: auth/register
          method: post
          cors: true
  login:
    handler: functions/auth/login.handler
    events:
      - http:
          path: auth/login
          method: post
          cors: true
  getProfile:
    handler: functions/users/profile.getProfile
    events:
      - http:
          path: users/profile
          method: get
          cors: true
  updateProfile:
    handler: functions/users/profile.updateProfile
    events:
      - http:
          path: users/profile
          method: put
          cors: true

plugins:
  - serverless-offline

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.userTable}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: email-index
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL